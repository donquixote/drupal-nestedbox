<?php

xautoload()->registerModulePsr4(__FILE__, 'psr4');

require_once __DIR__ . '/nestedbox.public.inc';

/**
 * Implements hook_module_implements_alter()
 *
 * @param array $implementations
 *   Array of the format $implementations[$module] = $group|false.
 * @param string $hook
 */
function nestedbox_core_module_implements_alter(&$implementations, $hook) {

  switch ($hook) {
    case 'menu_alter':
      // Push these implementations to the end.
      // $group will be changed further down.
      $group = FALSE;
      unset($implementations['nestedbox_core']);
  }

  switch ($hook) {

    case 'menu':
    case 'menu_alter':
    case 'admin_menu_map':
      $group = 'menu';
      break;

    case 'entity_info':
    case 'entity_info_alter':
    case 'entity_property_info':
    case 'entity_operation_info':
      $group = 'entity';
      break;

    case 'theme':
      $group = 'theme';
      break;
  }

  if (!isset($group)) {
    return;
  }
  elseif (FALSE !== $group) {
    require_once __DIR__ . '/nestedbox_core.' . $group . '.inc';
  }

  $implementations['nestedbox_core'] = $group;
}

/**
 * Implements hook_permission()
 *
 * @return array
 */
function nestedbox_core_permission() {
  return array(
    'administer nestedbox types' => array(
      'title' => t('Administer Nested Box entities'),
      'description' => t('Perform administration tasks for my module.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * @param array $form
 */
function nestedbox_core_form_entity_operations_operation_form_nestedbox_edit_alter(&$form) {
  $form['admin_title']['#title'] = t('Administrative title');
}
